#!/usr/bin/env php
<?php
/**
 * Console manipulation for the aplication
 *
 * Please report bugs on https://github.com/espino316/rsphp/issues
 *
 * @author Luis Espino <luis@espino.info>
 * @copyright Copyright (c) 2016, Luis Espino. All rights reserved.
 * @license MIT License
 */

//  Before anything, make a dump-autoload,
//  to create the autoload file
//  if the file is not existing only

DEFINE("CWD", getcwd());
DEFINE("RS_PHP_PATH", dirname( dirname( dirname( dirname( __FILE__ ) ) ) ) );

if ( !file_exists( RS_PHP_PATH."/vendor/autoload.php" ) ) {
    chdir( RS_PHP_PATH );
    shell_exec( "composer dump-autoload" );
    chdir( CWD );
} // end if not exists

require_once RS_PHP_PATH."/vendor/autoload.php";

if ( file_exists( RS_PHP_PATH."/public/index.php" ) ) {
    require_once RS_PHP_PATH."/public/index.php";
} // end if file exists

use RSPhp\Framework\DbSchema;
use RSPhp\Framework\RS;
use RSPhp\Framework\File;

$commandLine = RS::processStdIn( $argv );
$commandParameters = $commandLine["parameters"];
$command = $commandLine["command"];

function printHelp() {
    $content = File::read( RS_PHP_PATH . DS . "rsphp_help" );
    RS::printLine( $content );
} // end function printHelp

function printVersion() {
    echo RS::$version;
} // end function printVersion

function routeCommand( $command, $commandParameters ) {
    global $commandRoutes;
    if ( isset( $commandRoutes[$command] ) ) {
        $commandRoutes[$command]( $commandParameters );
    } else {
        RS::printLine( "Command not found" );
        RS::printLine( "Type 'rsphp help' for help" );
    } // end if command found
} // end function routeCommand

function cleanApp() {
    RS::cleanApp();
} // end function cleanApp

function connectionList() {
    RS::listConnections();
} // end function connectionList

function controllerList() {
    RS::listControllers();
} // end function controllerList

function modelLists() {
    RS::listModels();
} // end function modelList

function routeList() {
    RS::listRoutes();
} // end function routeList

function datasourceList() {
    RS::listDataSources();
} // end function datasourceList

function controllerCreate( $commandParameters ) {
    if ( !isset( $commandParameters["name"] ) ) {
        RS::printLine( "Controller name must be specified" );
        return;
    } // end if not doc

    if ( !isset( $commandParameters["doc"] ) ) {
        RS::printLine( "Controller documentation must be specified" );
        return;
    } // end if not doc

    RS::printLine("Creating controller");
    RS::createController( $commandParameters["name"], $commandParameters["doc"] );
    return;
} // end function controllerCreate

function modelCreate( $commandParameters ) {
    //  The table name
    $tableName = strtolower( $commandParameters["table"] );

    RS::printLine("Beginning creation of model for table $tableName...");

    // Model Create
    RS::createModel( $tableName );
    //  Update autoload
    RS::dumpAutoload();

    return;
} // end function modelCreate

function connectionAdd( $commandParameters ) {
    if (count($commandParameters) === 0) {
        RS::printLine("What's your connection name?: (default)");
        $name = RS::readLine();
        $name = ($name) ? $name : 'default';

        RS::printLine("What's your db engine?: (mysql | pgsql | sqlsrv | dblib)");
        $driver = RS::readLine();
        while (!$driver) {
            RS::printLine("You must provide a db driver");
            RS::printLine("What's your db engine?: (mysql | pgsql | sqlsrv | dblib)");
            $driver = RS::readLine();
        } // end while not drive

        RS::printLine("What's your server name or IP?:");
        $hostName= RS::readLine();
        while (!$hostName) {
            RS::printLine("You must provide a server name");
            RS::printLine("What's your server name or IP?:");
            $hostName = RS::readLine();
        } // end while not drive

        RS::printLine("What's your database name?:");
        $databaseName = RS::readLine();
        while (!$databaseName) {
            RS::printLine("You must provide a database name");
            RS::printLine("What's your database name?:");
            $databaseName = RS::readLine();
        } // end while not drive

        RS::printLine("What's the db user's name?:");
        $userName = RS::readLine();
        while (!$userName) {
            RS::printLine("You must provide an user name");
            RS::printLine("What's the db user's name?:");
            $userName = RS::readLine();
        } // end while not drive

        RS::printLine("What's the db user's password?:");
        $pwd = RS::readLine();
        if (!$pwd) {
            RS::printLine("Empty passwords is a very insecure configuration");
        } // end while not drive

        RS::printLine("Any specific port?:");
        $port = RS::readLine();

        RS::addConnection(
            $name,
            $driver,
            $hostName,
            $databaseName,
            $userName,
            $pwd,
            $port
        );

        return;
    } // end if

    $port = null;

    if ( isset( $commandParameters["port"] ) ) {
        $port = $commandParameters["port"];
    } // end if port

    RS::addConnection(
        $commandParameters["name"],
        $commandParameters["driver"],
        $commandParameters["hostName"],
        $commandParameters["databaseName"],
        $commandParameters["userName"],
        $commandParameters["password"],
        $port
    );

    RS::printLine( "Connection added." );
} // end function connectionAdd

function dataSourceAdd( $commandParameters ) {
    $text = "";
    $isFile = false;

    if ( isset( $commandParameters["file"] ) ) {
        $text = $commandParameters["file"];
        $isFile = true;
    } // end if file

    RS::addDataSource(
        $commandParameters["connection"],
        $commandParameters["name"],
        $commandParameters["type"],
        $text,
        $isFile
    );
} // end function dataSourceAdd

function routeAdd( $commandParameters ) {
    RS::addRoute(
        $commandParameters["method"],
        $commandParameters["url"],
        $commandParameters["newUrl"]
    );

    RS::printLine( "Route added." );
} // end function routeAdd

function viewAdd( $commandParameters ) {

    if ( !isset( $commandParameters["name"] ) ) {
        RS::printLine( "View name must be specified" );
        return;
    } // end if not doc

    if ( !isset( $commandParameters["type"] ) ) {
        $commandParameters["type"] = "content";
    } // end if not doc

    RS::createView(
        $commandParameters["name"],
        $commandParameters["type"]
    );

    return;

} // end function viewAdd

function viewCreateNew( $commandParameters ) {
    if ( !isset( $commandParameters["table"] ) ) {
        RS::printLine( "Table name must be specified" );
        return;
    } // end if not doc

    RS::createViewNewRecord( $commandParameters["table"] );
    return;
} // end function viewCreateNew

function init( $commandParameters ) {
    if ( !isset( $commandParameters["dir"] ) ) {
        $dir = "default";
    } else {
        $dir = $commandParameters["dir"];
    } // end if

    RS::init( $dir );
} // end function init

function restapiCreate( $commandParameters ) {

    if (count($commandParameters) == 0) {

        $conn = RS::defaultReadLine("What's the connection? (default)?:", 'default');
        echo "conn $conn\n";
        $controllerName =
            RS::forceReadLine(
                "Type the controller name for the restapi:",
                "You must provide a controller name"
            );

        RS::printLine("Any table to avoid? (comma sepparated, please):");
        $except = RS::readLine();

        RS::generateRestfulApi(
            $controllerName,
            $conn,
            $except
        );

        return;
    } // end if no commandParameters$commandParameters

    RS::generateRestfulApi($commandParameters["controller"], $commandParameters["conn"], $commandParameters["except"]);
} // end function restapiCreate

function schemaUpdate( $commandParameters ) {
    if (count($commandParameters) > 0) {
        RS::printLine('This command doesn\'t require parameters');
        return;
    } // end if commandParameters$commandParameters

    RS::schemaUpdate();
} // end function schemaUpdate

function schemaAdd( $commandParameters ) {
    //  Creates a new schema file && prints it's location
    $count = count($commandParameters);
    if ($count > 1) {

        RS::printLine('This command require just 1 parameter');
        return;

    } else if ($count == 1) {

        $fileName = RS::createEmptySchemaFile($commandParameters["description"]);
        RS::printLine("The file $fileName has been generated");

    } else if ($count == 0) {

        $description =
            RS::forceReadLine(
                "Type the schema migration short description:",
                "You must provide a proper migration short description"
            );

        $fileName = RS::createEmptySchemaFile($description);
        RS::printLine("The file $fileName has been generated");

    }// end if commandParameters$commandParameters
}

function generateProcedures( $commandParameters ) {
    if (count($commandParameters) == 0) {
        $conn = 'default';
    } else if (!$commandParameters["conn"]) {
        RS::printLine("Must specify --conn parameter");
        return;
    } else {
        $conn = $commandParameters["conn"];
    } // end if then else count commandParameters$commandParameters

    RS::generateProcedures($conn);
} // end function generateProcedures

function parseSchema( $commandParameters ) {
    $count = count($commandParameters);
    if ($count != 1) {

        RS::printLine('This command require one parameter (filename)');
        return;

    } else if ($count == 1 && $commandParameters["filename"]) {

        $fileName = $commandParameters["filename"];

        if (!File::exists($fileName)) {
            RS::printLine("File do not exists.");
            return;
        }

        $dbSchema = new DbSchema;
        $dbSchema->parseYaml($fileName, false);
        RS::printLine("The file $fileName.sql has been generated");

    } // end if one param
} // end function parseSchema

$commandRoutes = [];
$commandRoutes["help"] = "printHelp";
$commandRoutes["version"] = "printVersion";
$commandRoutes["cleanapp"] = "cleanApp";
$commandRoutes["connection list"] = "connectionList";
$commandRoutes["controller list"] = "controllerList";
$commandRoutes["model list"] = "modelList";
$commandRoutes["route list"] = "routeList";
$commandRoutes["datasource list"] = "datasourceList";
$commandRoutes["connection add"] = "connectionAdd";
$commandRoutes["datasource add"] = "dataSourceAdd";
$commandRoutes["route add"] = "routeAdd";
$commandRoutes["view add"] = "viewAdd";
$commandRoutes["view create new"] = "viewCreateNew";
$commandRoutes["init"] = "init";
$commandRoutes["restapi create"] = "restapiCreate";
$commandRoutes["schema update"] = "schemaUpdate";
$commandRoutes["schema add"] = "schemaAdd";
$commandRoutes["generate procedures"] = "generateProcedures";
$commandRoutes["parse schema"] = "parseSchema";

routeCommand( $command, $commandParameters );

RS::printLine("");
